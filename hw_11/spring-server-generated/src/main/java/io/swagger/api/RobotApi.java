/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DiagnosticData;
import io.swagger.model.RobotAPIResponse;
import io.swagger.model.RobotConfiguration;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-03-05T18:17:47.729896239Z[GMT]")
@Validated
public interface RobotApi {

    @Operation(summary = "Configure robot", description = "Configure a specific robot", security = {
        @SecurityRequirement(name = "api_key")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Robot configured successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RobotAPIResponse.class))) })
    @RequestMapping(value = "/robot/{robot_id}/configuration",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<RobotAPIResponse> robotRobotIdConfigurationPut(@Parameter(in = ParameterIn.PATH, description = "The ID of the robot", required=true, schema=@Schema()) @PathVariable("robot_id") Integer robotId
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody RobotConfiguration body
);


    @Operation(summary = "Send diagnostics", description = "Send diagnostics for a specific robot", security = {
        @SecurityRequirement(name = "api_key")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Diagnostics sent successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RobotAPIResponse.class))) })
    @RequestMapping(value = "/robot/{robot_id}/diagnostics",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<RobotAPIResponse> robotRobotIdDiagnosticsPost(@Parameter(in = ParameterIn.PATH, description = "The ID of the robot", required=true, schema=@Schema()) @PathVariable("robot_id") Integer robotId
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody DiagnosticData body
);


    @Operation(summary = "Update firmware", description = "Update firmware for a specific robot", security = {
        @SecurityRequirement(name = "api_key")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Firmware updated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = RobotAPIResponse.class))) })
    @RequestMapping(value = "/robot/{robot_id}/firmware",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.PUT)
    ResponseEntity<RobotAPIResponse> robotRobotIdFirmwarePut(@Parameter(in = ParameterIn.PATH, description = "The ID of the robot", required=true, schema=@Schema()) @PathVariable("robot_id") Integer robotId
, @Parameter(in = ParameterIn.DEFAULT, description = "",schema=@Schema()) @RequestPart(value="firmware_file", required=false)  java.io.File firmwareFile
);

}

